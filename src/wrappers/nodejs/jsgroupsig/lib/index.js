const jsgroupsig = require("../build/Release/jsgroupsig")

/** Constants defined in libgroupsig **/
/* @TODO: Is there a more portable way to do this? */

/* Supported group schemes */
//const KTY04 = 0;
const BBS04 = 1;
//const CPY06 = 2;
const GL19 = 3;
const PS16 = 4;

module.exports = {

    /** Constants **/

    /* Group codes */
    //KTY04: KTY04,
    BBS04: BBS04,
    //CPY06: CPY06,
    GL19: GL19,
    PS16: PS16,

    /**
     * Prints "Hello, World!" in the standard output.
     *
     * @since      0.1.0
     *
     */
    hello_world: jsgroupsig.gs_hello_world,

    /**
     * Determines if the specified scheme is supported or not.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code    The code identifying the scheme.
     *
     * @return {bool} true if the scheme is supported, false otherwise.
     */
    is_supported_scheme: jsgroupsig.gs_is_supported_scheme,

    /**
     * Returns a native data structure corresponding to the given scheme.
     *
     * Uses the specified string to browse the supported schemes. If a match is
     * found, it returns a native data structure with the functions to run
     * operations of the given scheme.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {string}   str         The descriptive name of the scheme to fetch.
     *
     * @return {native} A native data structure with the scheme functionality.
     */
    get_groupsig_from_str: jsgroupsig.gs_get_groupsig_from_str,

    /**
     * Returns a native data structure corresponding to the given scheme.
     *
     * Uses the specified code to browse the supported schemes. If a match is
     * found, it returns a native data structure with the functions to run
     * operations of the given scheme.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code         The scheme's code.
     *
     * @return {native} A native data structure with the scheme functionality.
     */    
    get_groupsig_from_code: jsgroupsig.gs_get_groupsig_from_code,

    /**
     * Returns the code associated to the descriptive scheme name.
     *
     * If the given string corresponds to a valid scheme, returns the scheme's 
     * code.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}      code       Ignore. Will be removed (issue 10).
     * @param {string}      str        The scheme name.
     *
     * @return {int} The code associated to the scheme.
     */        
    get_code_from_str: jsgroupsig.gs_get_code_from_str,
    
    /**
     * Initializes a scheme of the specified type.
     *
     * Initializes internal variables required for operating with schemes of the
     * given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The scheme code.
     * @param {int}   seed           A seed, optionally used to seed the system's PRNG.
     *
     * @return {native} The initialized config structure to operate with this
     *  scheme. May be needed in the setup call.
     */    
    init: jsgroupsig.gs_init,

    /**
     * Frees the variables initialized with init.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The scheme's code.
     * @param {native}   config      The configuration structure produced by init.
     *
     * @return void.
     */    
    clear: jsgroupsig.gs_clear,

    /**
     * Creates the group and manager(s) keys of schemes of the given type.
     *
     * Depending on the concrete type of scheme to setup, several calls to this
     * function, with different parameters, may be needed. Check the
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The type of scheme to setup.
     * @param {native}   grpkey      A (possibly partially initialized) group key.
     * @param {native}   mgrkey      A (possibly partially initialized) manager 
     *                               key.
     * @param {native}   [gml]       A Group Membership List.
     * @param {native}   [cfg]       The config structure generated by init.
     */    
    setup: jsgroupsig.gs_setup,    

    /**
     * Returns the number of messages exchanged between manager and member 
     * during the join protocol.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code     The scheme identifier.
     *
     * @return {int} The number of exchanged messages.
     */        
    get_joinseq: jsgroupsig.gs_get_joinseq,

    /**
     * Determines who starts the join protocol.
     *
     * If the first message needs to be sent by the manager, returns 0. Else, it
     * returns 1.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The scheme code.
     *
     * @return {int} 0 if the manager starts, 1 if the member starts.
     */        
    get_joinstart: jsgroupsig.gs_get_joinstart,

    /**
     * Runs (one of) the member join step(s).
     *
     * Runs (one of) the member join step(s) of the interactive join process.
     * Depending on the scheme, this may require input from previous steps, and
     * the produced output may be required for subsequent steps.
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   step           The step to run.
     * @param {native}   memkey    The member key. In some cases, this may be a 
     *                             partially initialized member key from previous
     *                             join_mem executions.
     * @param {native}   grpkey    The group's public key.
     * @param {native}   [min]     The input message to run this step.
     *
     * @return {native} A native representation of the output message, if any.
     */        
    join_mem: jsgroupsig.gs_join_mem,

    /**
     * Runs (one of) the manager join step(s).
     *
     * Runs (one of) the manager join step(s) of the interactive join process.
     * Depending on the scheme, this may require input from previous steps, and
     * the produced output may be required for subsequent steps.
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   step           The step to run.
     * @param {native}   mgrkey    The manager key.
     * @param {native}   grpkey    The group's public key.
     * @param {native}   [min]     The input message to run this step.
     * @param {native}   [gml]     A Group Membership List.
     *
     * @return {native} A native representation of the output message, if any.
     */        
    join_mgr: jsgroupsig.gs_join_mgr,

    /**
     * Creates a group signature for the given message.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {string} str           The UTF-8 string to sign.
     * @param {native} memkey        The member key.
     * @param {native} grpkey        The group key.
     * @param {int}   [seed]         Optionally used to seed the PRNG.
     *
     * @return {native} The produced signature.
     */        
    sign: jsgroupsig.gs_sign,

    /**
     * Verifies a group signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The signature to verify.
     * @param {string}   str           The signed message.
     * @param {native}   grpkey        The group key.
     *
     * @return {boolean} true if the signature is valid; false otherwise.
     */        
    verify: jsgroupsig.gs_verify,

    /**
     * Opens a group signature.
     *
     * Most schemes support opening a group signature, which gives back the 
     * identity of the (otherwise anonymous) signer.
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The group signature to open.
     * @param {native}   grpkey        The group key.
     * @param {native}   mgrkey        The opener's key.
     * @param {native}   [gml]         A Group Membership List.
     * @param {native}   [crl]         A Certificate Revocation List.
     *
     * @return {object} An object containing an 'id' field with a native data
     *  structure representing the identity of the signer, and a 'proof' field
     *  that, for schemes that support verifiable opening, contains a native
     *  structure with the opening proof..
     */        
    open: function (sig, grpkey, mgrkey, gml = null, crl = null) {
	let id = null;
	let proof = null;
	let code = jsgroupsig.gs_signature_get_code(sig);
	if (jsgroupsig.gs_has_open_proof(code) == 1) {
	    proof = jsgroupsig.gs_proof_init(code);
	}
	id = jsgroupsig.gs_open(sig, grpkey, mgrkey, gml, proof);
	return { "id": id, "proof": proof }; 
    },

    /**
     * Verifies opening proofs produced by the open algorithm.
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      1.0.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   proof         The opening proof to verify.
     * @param {native}   sig           The group signature to open.
     * @param {native}   grpkey        The group key.
     * @param {native}   [id]          The signer identity produced by the open
     *                                 algorithm.
     *
     * @return {boolean} true if the proof is valid, false otherwise.
     */        
    open_verify: function (proof, sig, grpkey, id = null) {
	return jsgroupsig.gs_open_verify(proof, sig, grpkey, id);
    },

    /**
     * Blinds a group signature.
     *
     * Some schemes allow blinding a group signature. In these schemes, blinding
     * done using a (probably asymmetric) key(pair).
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}  bldkey         The key(pair) to use for blinding.
     * @param {native}  grpkey         The group key.
     * @param {native}  sig            The signature to blind.
     * @param {string}  msg            The signed message.
     *
     * @return {native} A blinded signature.
     */        
    blind: jsgroupsig.gs_blind,    

    /**
     * Converts (links) a set of group signatures.
     *
     * Some schemes support converting sets of (blinded) group signatures in
     * order to link them in a privacy respectful manner.
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {array}   bsigs          An array of (native) blinded group 
     *                                 signatures, as produced by blind.
     * @param {native}  grpkey         The group key.
     * @param {native}  mgrkey         The manager (converter) key.
     * @param {native}  bldkey         The blinding key.
     * @param {native}   [msg]         Currently unused.
     *
     * @return {array} An array of native objects containing the converted
     *  blinded signatures.
     */        
    convert: jsgroupsig.gs_convert,

    /**
     * Unblinds a converted blinded signature.
     *
     * Some schemes support converting blinded group signatures. This function
     * removes the blinding after the signature has been converted.
     *
     * @link https://github.com/IBM/libgroupsig/wiki.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   bsig          The converted blinded signature.
     * @param {native}   bldkey        The blinding key(pair).
     * @param {native}   msg           A native message objecte that will
     *                                 be set to a (fingerprint of) the 
     *                                 message associated to the blinded 
     *                                 signature.
     * @param {native}   [sig]         The originally unblinded signature.
     * @param {native}   [grpkey]      The group key.
     *
     * @return {native} The (pseudonymized) identity of the signer.
     */        
    unblind: function (bsig, bldkey, sig = null, grpkey = null) {
	let nym = null;
	let msg = jsgroupsig.gs_message_init();
	if (!sig) {
	    nym = jsgroupsig.gs_unblind(bsig, bldkey, msg);
	} else if (!grpkey) {
	    nym = jsgroupsig.gs_unblind(bsig, bldkey, msg, sig);
	} else {
	    nym = jsgroupsig.gs_unblind(bsig, bldkey, msg, sig, grpkey);
	}
	return { "nym": nym, "msg": msg };
    },

    /* grp_key.h functions */

    /**
     * Returns the set of functions to manage native group keys.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */        
    grp_key_handle_from_code: jsgroupsig.gs_grp_key_handle_from_code,

    /**
     * Initializes a native group key of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native group key structure.
     */        
    grp_key_init: jsgroupsig.gs_grp_key_init,

    /**
     * Frees the memory used to store a native group key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The native group key to free.
     */        
    grp_key_free: jsgroupsig.gs_grp_key_free,

    /**
     * Copies a group key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination group key. Must be 
     *                               initialized by the caller.
     * @param {native}   src         The source group key.
     */    
    grp_key_copy: jsgroupsig.gs_grp_key_copy,

    /**
     * Returns the number of bytes needed to store a native group key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The group key.
     *
     * @return {int} The number of bytes needed to store the given group key.
     */    
    grp_key_get_size: jsgroupsig.gs_grp_key_get_size,

    /**
     * Exports a group key as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The group key to export.
     *
     * @return {string} The Base64 string with the exported key.
     */    
    grp_key_export: jsgroupsig.gs_grp_key_export, 

    /**
     * Imports a group key from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}     code         The scheme's code.
     * @param {string}   str         The string with the exported group key.
     *
     * @return {native} A group key.
     */        
    grp_key_import: jsgroupsig.gs_grp_key_import,

    /**
     * Returns a human readable string for the given group key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native} key           The group key.
     *
     * @return {string} The human readable string for the key.
     */    
    grp_key_to_string: jsgroupsig.gs_grp_key_to_string,

    /* mgr_key.h functions */

    /**
     * Returns the set of functions to manage native manager keys.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    mgr_key_handle_from_code: jsgroupsig.gs_mgr_key_handle_from_code,

    /**
     * Initializes a native manager key of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native manager key structure.
     */
    mgr_key_init: jsgroupsig.gs_mgr_key_init,

    /**
     * Frees the memory used to store a native manager key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The native manager key to free.
     */        
    mgr_key_free: jsgroupsig.gs_mgr_key_free,

    /**
     * Copies a manager key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination manager key. Must be 
     *                               initialized by the caller.
     * @param {native}   src         The source manager key.
     */        
    mgr_key_copy: jsgroupsig.gs_mgr_key_copy,

    /**
     * Returns the number of bytes needed to store a native manager key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The manager key.
     *
     * @return {int} The number of bytes needed to store the given manager key.
     */        
    mgr_key_get_size: jsgroupsig.gs_mgr_key_get_size,

    /**
     * Exports a manager key as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The manager key to export.
     *
     * @return {string} The Base64 string with the exported key.
     */    
    mgr_key_export: jsgroupsig.gs_mgr_key_export,

    /**
     * Imports a manager key from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}     code         The scheme's code.
     * @param {string}   str         The string with the exported manager key.
     *
     * @return {native} A manager key.
     */                    
    mgr_key_import: jsgroupsig.gs_mgr_key_import,

    /**
     * Returns a human readable string for the given manager key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native} key           The manager key.
     *
     * @return {string} The human readable string for the manager key.
     */        
    mgr_key_to_string: jsgroupsig.gs_mgr_key_to_string,

    /* mem_key.h functions */

    /**
     * Returns the set of functions to manage native member keys.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    mem_key_handle_from_code: jsgroupsig.gs_mem_key_handle_from_code,

    /**
     * Initializes a native member key of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native member key structure.
     */    
    mem_key_init: jsgroupsig.gs_mem_key_init,

    /**
     * Frees the memory used to store a native member key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The native member key to free.
     */            
    mem_key_free: jsgroupsig.gs_mem_key_free,

    /**
     * Copies a member key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination member key. Must be 
     *                               initialized by the caller.
     * @param {native}   src         The source member key.
     */    
    mem_key_copy: jsgroupsig.gs_mem_key_copy,

    /**
     * Returns the number of bytes needed to store a native member key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The member key.
     *
     * @return {int} The number of bytes needed to store the given member key.
     */        
    mem_key_get_size: jsgroupsig.gs_mem_key_get_size,

    /**
     * Exports a member key as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The member key to export.
     *
     * @return {string} The Base64 string with the exported key.
     */    
    mem_key_export: jsgroupsig.gs_mem_key_export,

    /**
     * Imports a member key from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}     code         The scheme's code.
     * @param {string}   str         The string with the exported member key. 
     *
     * @return {native} A member key.
     */                    
    mem_key_import: jsgroupsig.gs_mem_key_import,

    /**
     * Returns a human readable string for the given member key.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native} key           The member key.
     *
     * @return {string} The human readable string for the key.
     */        
    mem_key_to_string: jsgroupsig.gs_mem_key_to_string,
    
    /* bld_key.h functions */

    /**
     * Returns the set of functions to manage native blinding key(pair)s.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    bld_key_handle_from_code: jsgroupsig.gs_bld_key_handle_from_code,

    /**
     * Initializes a native blinding key(pair) of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native blinding key(pair) structure.
     */        
    bld_key_init: jsgroupsig.gs_bld_key_init,

    /**
     * Frees the memory used to store a native blinding key(pair).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The native blinding key(pair) to free.
     */            
    bld_key_free: jsgroupsig.gs_bld_key_free,

    /**
     * Returns a randomly initialized blinding key(pair).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code         The scheme code.
     */        
    bld_key_random: jsgroupsig.gs_bld_key_random,

    /**
     * Copies a blinding key(pair).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination blinding key(pair). Must be
     *                               initialized by the caller.
     * @param {native}   src         The source binding key(pair).
     */        
    bld_key_copy: jsgroupsig.gs_bld_key_copy,

    /**
     * Returns the number of bytes needed to store a native blinding key(pair).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The blinding key(pair).
     *
     * @return {int} The number of bytes needed to store the given blinding 
     *  key(pair).
     */        
    bld_key_get_size: jsgroupsig.gs_bld_key_get_size,

    /**
     * Exports a blinding key(pair) as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The blinding key(pair) to export.
     *
     * @return {string} The Base64 string with the blinding key(pair).
     */    
    bld_key_export: jsgroupsig.gs_bld_key_export,

    /**
     * Exports the public part of a blinding keypair as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   key           The blinding keypair to export.
     *
     * @return {string} The Base64 string with the public blinding key.
     */    
    bld_key_export_pub: jsgroupsig.gs_bld_key_export_pub,

    /**
     * Imports a blinding key(pair) from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}     code         The scheme's code.
     * @param {string}   str         The string with the exported blinding 
     *  key(pair).
     *
     * @return {native} A blinding key(pair).
     */                
    bld_key_import: jsgroupsig.gs_bld_key_import,

    /**
     * Returns a human readable string for the given blinding key(pair).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native} key           The blinding key(pair).
     *
     * @return {string} The human readable string for the key(pair).
     */        
    bld_key_to_string: jsgroupsig.gs_bld_key_to_string,

    /* signature.h */

    /**
     * Returns the set of functions to manage native group signatures.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    signature_handle_from_code: jsgroupsig.gs_signature_handle_from_code,

    /**
     * Initializes a native signature of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native signature structure.
     */        
    signature_init: jsgroupsig.gs_signature_init,

    /**
     * Frees the memory used to store a native group signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The native group signature to free.
     */            
    signature_free: jsgroupsig.gs_signature_free,

    /**
     * Copies a signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination signature. Must be
     *                               initialized by the caller.
     * @param {native}   src         The source signature.
     */    
    signature_copy: jsgroupsig.gs_signature_copy,

    /**
     * Returns the number of bytes needed to store a native group signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The group signature.
     *
     * @return {int} The number of bytes needed to store the given group 
     *  signature.
     */        
    signature_get_size: jsgroupsig.gs_signature_get_size,

    /**
     * Exports a group signature as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The group signature to export.
     *
     * @return {string} The Base64 string with the exported signature.
     */    
    signature_export: jsgroupsig.gs_signature_export,

    /**
     * Imports a signature from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}     code         The scheme's code.
     * @param {string}   str         The string with the exported signature.
     *
     * @return {native} A group signature.
     */            
    signature_import: jsgroupsig.gs_signature_import,

    /**
     * Returns a human readable string for the given group signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native} sig           The group signature.
     *
     * @return {string} The human readable string for the signature.
     */        
    signature_to_string: jsgroupsig.gs_signature_to_string,

    /* blindsig.h */

    /**
     * Returns the set of functions to manage native blinded group signatures.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    blindsig_handle_from_code: jsgroupsig.gs_blindsig_handle_from_code,

    /**
     * Initializes a native blinded signature of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native blinded signature structure.
     */        
    blindsig_init: jsgroupsig.gs_blindsig_init,

    /**
     * Frees the memory used to store a native blinded group signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig         The native blinded group signature to free.
     */    
    blinsig_free: jsgroupsig.gs_blindsig_free,

    /**
     * Copies a blinded signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination blinded signature. Must be
     *                               initialized by the caller.
     * @param {native}   src         The source binded signature.
     */    
    blindsig_copy: jsgroupsig.gs_blindsig_copy,

    /**
     * Returns the number of bytes needed to store a native blinded signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The blinded signature.
     *
     * @return {int} The number of bytes needed to store the given blinded 
     *  signature.
     */        
    blindsig_get_size: jsgroupsig.gs_blindsig_get_size,

    /**
     * Exports a blinded signature as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The blinded signature to export.
     *
     * @return {string} The Base64 string with the exported signature.
     */    
    blindsig_export: jsgroupsig.gs_blindsig_export,

    /**
     * Imports a blinded signature from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}     code         The scheme's code.
     * @param {string}   str         The string with the exported signature.
     *
     * @return {native} A blinded signature.
     */            
    blindsig_import: jsgroupsig.gs_blindsig_import,

    /**
     * Returns a human readable string for the given blinded signature.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native} sig The blinded signature.
     *
     * @return {string} The human readable string for the blinded signature.
     */        
    blindsig_to_string: jsgroupsig.gs_blindsig_to_string,

    /* proof.h */
    proof_handle_from_code: jsgroupsig.gs_proof_handle_from_code,
    proof_init: jsgroupsig.gs_proof_init,
    proof_free: jsgroupsig.gs_proof_free,
    proof_copy: jsgroupsig.gs_proof_copy,
    proof_get_size: jsgroupsig.gs_proof_get_size,
    proof_export: jsgroupsig.gs_proof_export,
    proof_import: jsgroupsig.gs_proof_import,
    proof_to_string: jsgroupsig.gs_proof_to_string,    

    /* identity.h */

    /**
     * Returns the set of functions to manage native identities.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    identity_handle_from_code: jsgroupsig.gs_identity_handle_from_code,

    /**
     * Initializes a native identity of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native identity structure.
     */        
    identity_init: jsgroupsig.gs_identity_init,

    /**
     * Frees the memory used to store a native identity.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The native identity to free.
     */    
    identity_free: jsgroupsig.gs_identity_free,

    /**
     * Copies an identity.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   dst         The destination identity. Must be
     *                               initialized by the caller.
     * @param {native}   src         The source identity.
     */    
    identity_copy: jsgroupsig.gs_identity_copy,

    /**
     * Compares two identities.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   id1         The first identity.
     * @param {native}   id2         The second identity.
     *
     * @return 0 if both identities are equal, != 0 if they are different.
     */        
    identity_cmp: jsgroupsig.gs_identity_cmp,

    /**
     * Exports the given identity as a UTF-8 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   id         The identity to export.
     *
     * @return {string} A UTF-8 string storing the identity.
     */            
    identity_to_string: jsgroupsig.gs_identity_to_string,

    /**
     * Imports the given identity from a UTF-8 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code         The identity's scheme.
     * @param {string}   str       The string storing the identity.
     *
     * @return {native} A native identity structure.
     */    
    identity_from_string: jsgroupsig.gs_identity_from_string,

    /* gml.h */

    /**
     * Returns the set of functions to manage native GMLs.
     *
     * Ignore. Will probably be removed (issue 11).
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native structure with the function pointers.
     */    
    gml_handle_from_code: jsgroupsig.gs_gml_handle_from_code,

    /**
     * Initializes a native GML of the given type.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code           The code identifying the scheme.
     *
     * @return {native} A native GML structure.
     */        
    gml_init: jsgroupsig.gs_gml_init,

    /**
     * Frees the memory used to store a native GML.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig           The native GML to free.
     */    
    gml_free: jsgroupsig.gs_gml_free,

    /**
     * Exports a GML to the given file.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   gml           The GML to export.
     * @param {int}   format           The format to use for exporting. Currently,
     *  must be GML_FILE, but this will be changed in the future (issue-12).
     * @param {native}   gml           The GML to export.
     */        
    gml_export: jsgroupsig.gs_gml_export_file,

    /**
     * Imports a GML from the given file.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {int}   code             The GML's scheme.
     * @param {int}   format           The format to use for importing. Currently,
     *  must be GML_FILE, but this will be changed in the future (issue-12).
     * @param {string}   src           The file name.
     *
     * @return {native} A GML native structure.
     */            
    gml_import: jsgroupsig.gs_gml_import,

    /* message.h */

    /**
     * Initializes a native message structure.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @return {native} A native message structure.
     */        
    message_init: jsgroupsig.gs_message_init,

    /**
     * Frees the memory used to store a native message.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   sig      The native message structure to free.
     */    
    message_free: jsgroupsig.gs_message_free,

    /**
     * Imports the given message from a UTF-8 string.
     *
     * Only works for messages that can be represented as a UTF-8 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {string}   str         The exported message.
     *
     * @return {native} A native message structure.
     */
    message_from_string: jsgroupsig.gs_message_from_string,

    /**
     * Exports the given message as a UTF-8 string.
     *
     * Only works for messages that can be represented as a UTF-8 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   msg         The message to export.
     *
     * @return {string} A UTF-8 string storing the message.
     */
    message_to_string: jsgroupsig.gs_message_to_string,    

    /**
     * Imports the given message from a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {string}   str         The exported message.
     *
     * @return {native} A native message structure.
     */        
    message_from_stringb64: jsgroupsig.gs_message_from_stringb64,

    /**
     * Exports the given message as a Base64 string.
     *
     * Only works for messages that can be represented as a Base64 string.
     *
     * @since      0.1.0
     *
     * @fires   On error, throws a TypeError.
     *
     * @param {native}   msg         The message to export.
     *
     * @return {string} A Base64 string storing the message.
     */
    message_to_stringb64: jsgroupsig.gs_message_to_stringb64
    
}
